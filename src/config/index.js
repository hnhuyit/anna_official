// src/config/index.js
import dotenv from "dotenv";
import Airtable from "airtable";

dotenv.config();

// C·∫•u h√¨nh chung t·ª´ .env
const config = {
  openaiApiKey: process.env.OPENAI_API_KEY, // ON SERVER
  airtableApiKey: process.env.AIRTABLE_API_KEY, // ON SERVER
  baseId: process.env.AIRTABLE_BASE_ID || "app2wbbC0HSYFi7Q2",  // ON SERVER
  systemPrompt: process.env.SYSTEM_PROMPT || "B·∫°n l√† tr·ª£ l√Ω OA.", // ON APP 
  oaAccessToken: process.env.OA_ACCESS_TOKEN, // ON APP
};

// Thi·∫øt l·∫≠p Airtable base
const base = new Airtable({ apiKey: config.airtableApiKey }).base(config.baseId);
const TABLE_NAME = "Conversations";

// L∆∞u tr·ªØ token hi·ªán t·∫°i (c√≥ th·ªÉ kh·ªüi t·∫°o t·ª´ bi·∫øn m√¥i tr∆∞·ªùng)
let cachedToken = config.oaAccessToken || "";

/**
 * L·∫•y c√°c c·∫•u h√¨nh t·ª´ b·∫£ng Airtable (b·∫£ng Meta)
 * Gi·∫£ s·ª≠ b·∫£ng Meta c√≥ c√°c tr∆∞·ªùng:
 *   - name: t√™n c·∫•u h√¨nh (v√≠ d·ª• "OA_ACCESS_TOKEN")
 *   - key: gi√° tr·ªã c·ªßa c·∫•u h√¨nh ƒë√≥.
 */

export async function fetchConfigFromAirtable() {
  try {
    const tableName = "Meta";
    const records = await base(tableName).select().all();
    const airtableConfig = {};
    records.forEach((record) => {
      const name = record.fields.name;
      const value = record.fields.key;
      if (name && typeof value !== "undefined") {
        airtableConfig[name] = value;
      }
    });
    return airtableConfig;
  } catch (error) {
    console.error("Error fetching config from Airtable:", error);
    return {};
  }
}

/**
 * L√†m m·ªõi OA_ACCESS_TOKEN t·ª´ Airtable.
 * N·∫øu token m·ªõi kh√°c v·ªõi cachedToken th√¨ c·∫≠p nh·∫≠t v√† log l·∫°i th·ªùi gian refresh.
 */
export async function refreshOAToken() {
  const airtableConfig = await fetchConfigFromAirtable();
  const newToken = airtableConfig.OA_ACCESS_TOKEN;
  if (newToken && newToken !== cachedToken) {
    cachedToken = newToken;
    console.log(`[TOKEN] OA Token refreshed at ${new Date().toISOString()}`);
  } else {
    console.log("[TOKEN] OA Token unchanged");
  }
  return cachedToken;
}

/**
 * Tr·∫£ v·ªÅ token OA hi·ªán t·∫°i t·ª´ cache.
 */
export function getOAToken() {
  return cachedToken;
}

export async function updateLastInteractionOnlyIfNewDay(userId, userName = "", event_name, platform = "unknown") {
  try {
    const todayISOString = new Date().toISOString();
    const today = todayISOString.slice(0, 10); // yyyy-mm-dd
    const platformTag = platform.toLowerCase();

    const filterFormula = `AND(
      {UserID} = '${userId}',
      {platform} = '${platformTag}'
    )`;

    const records = await base(TABLE_NAME)
      .select({
        filterByFormula: filterFormula,
        maxRecords: 1,
      })
      .firstPage();

    // if (records.length === 0) {
    //   console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user ‚Üí t·∫°o m·ªõi:", userId, platformTag);

    //   await base(TABLE_NAME).create([
    //     {
    //       fields: {
    //         UserID: userId,
    //         Name: userName,
    //         platform: platformTag,
    //         event_name: event_name,
    //         LastInteraction: todayISOString,
    //       },
    //     },
    //   ]);

    //   console.log("‚úÖ ƒê√£ t·∫°o m·ªõi user:", userId, platformTag);
    //   return;
    // }

    const record = records[0];
    const oldDate = record.fields.LastInteraction;

    if (oldDate) {
      const lastDate = new Date(oldDate).toISOString().slice(0, 10);
      if (lastDate === today) {
        console.log("üü° ƒê√£ t∆∞∆°ng t√°c h√¥m nay ‚Üí kh√¥ng c·∫ßn update:", userId);
        return;
      }
    }

    // ‚úÖ C·∫≠p nh·∫≠t n·∫øu kh√°c ng√†y
    await base(TABLE_NAME).update([
      {
        id: record.id,
        fields: {
          LastInteraction: todayISOString,
          last_event: event_name,
        },
      },
    ]);

    console.log("‚úÖ ƒê√£ update LastInteraction m·ªõi cho:", userId, platformTag);
  } catch (err) {
    console.error("üî• L·ªói khi x·ª≠ l√Ω LastInteraction:", err);
  }
}

export async function ensureUserExists(userId, userName, avatarUrl = "", event_name, platform = "unknown") {
  
  const todayISOString = new Date().toISOString();
  const platformTag = platform.toLowerCase();
  const avatar = avatarUrl ? [{ url: avatarUrl }] : undefined;
  
  const formula = `AND({UserID} = '${userId}', {platform} = '${platformTag}')`;

  const records = await base(TABLE_NAME).select({
    filterByFormula: formula,
    maxRecords: 1
  }).firstPage();

  if (records.length > 0) {
    return records[0].id; // ‚úÖ Tr·∫£ v·ªÅ record ID ƒë√£ c√≥
  }

  // ‚ùó N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
  const newRecord = await base(TABLE_NAME).create([{
    fields: {
      UserID: userId,
      Name: userName || "(Unknown)",
      // avatarUrl: [{ url: avatarUrl }],
      avatarUrl: avatar, // field ki·ªÉu Attachment
      platform: platformTag,
      event_name: event_name,
      LastInteraction: todayISOString,
    }
  }]);
  console.log("‚úÖ ƒê√£ t·∫°o m·ªõi user:", userId, platformTag );
  return newRecord[0].id;
}

// Th√™m default export cho to√†n b·ªô config n·∫øu c·∫ßn
// export default config;
export { config, base };