// utils/notifyUtils.js
import axios from "axios";
import {  fetchConfigFromAirtable } from "../config/index.js"; // N·∫øu b·∫°n c√≥ g√≥i logic refresh token v√†o config ho·∫∑c service ri√™ng


// G·ªçi t·ª´ webhook ƒë·ªÉ c·∫£nh b√°o khi ph√°t hi·ªán s·ªë ƒëi·ªán tho·∫°i
export async function notifyPhoneDetected({ userId, phones, message, platform }) {
    const alertText = `üìû [${platform}] User ${userId} g·ª≠i s·ªë: ${phones.join(", ")}\nüí¨ N·ªôi dung: "${message}"`;
    console.log(alertText);
    
    await sendZaloAlert(alertText);
}

// G·ª≠i tin nh·∫Øn ch·ªß ƒë·ªông t·ª´ OA sang ng∆∞·ªùi d√πng n·ªôi b·ªô (admin)
export async function sendZaloAlert(message) {
    const config = await fetchConfigFromAirtable();
    console.log("zalo: ", config.ADMIN_ZALO_USER_ID, config.ZALO_ACCESS_TOKEN)

    if (!config.ZALO_ACCESS_TOKEN || !config.ADMIN_ZALO_USER_ID) {
      console.warn("‚ùó Thi·∫øu ZALO_ACCESS_TOKEN ho·∫∑c ADMIN_ZALO_USER_ID");
      return;
    }
  
    try {
      const res = await axios.post(
        "https://openapi.zalo.me/v3.0/oa/message/cs",
        {
          recipient: { user_id: config.ADMIN_ZALO_USER_ID },
          message: {
            text: message
          }
        },
        {
          headers: {
            "access_token": `Bearer ${config.ZALO_ACCESS_TOKEN}`,
            "Content-Type": "application/json"
          }
        }
      );

      if (res.data.error !== 0) {
        console.warn("‚ö†Ô∏è Zalo CS API ph·∫£n h·ªìi l·ªói:", res.data);
      } else {
        console.log("‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn c·∫£nh b√°o Zalo:", res.data);
      }
    //   console.log("‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn c·∫£nh b√°o Zalo:", res.data);
    } catch (err) {
      console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn OA Zalo:", err.response?.data || err.message);
    }
}